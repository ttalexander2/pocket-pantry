{"ast":null,"code":"\"use strict\";\n\nvar _defineProperty = require(\"@babel/runtime/helpers/defineProperty\");\n\nvar _classCallCheck = require(\"@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"@babel/runtime/helpers/createClass\");\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar react_native_1 = require(\"react-native-web/dist/index\");\n\nvar rtlFlexMap_1 = require(\"./rtlFlexMap\");\n\nvar RTLServiceStatic = function () {\n  function RTLServiceStatic() {\n    _classCallCheck(this, RTLServiceStatic);\n  }\n\n  _createClass(RTLServiceStatic, [{\n    key: \"isRTL\",\n    value: function isRTL() {\n      return react_native_1.I18nManager.isRTL;\n    }\n  }, {\n    key: \"select\",\n    value: function select(ltr, rtl) {\n      return this.isRTL() ? rtl : ltr;\n    }\n  }, {\n    key: \"ignoreRTL\",\n    value: function ignoreRTL(source) {\n      var rtl = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.isRTL();\n      var rtlStyle = Object.keys(rtlFlexMap_1.RtlFlexMap).reduce(function (style, prop) {\n        var currentStyleValue = source[prop];\n\n        if (currentStyleValue) {\n          var i18nStyleValue = rtlFlexMap_1.RtlFlexMap[prop].toRTL(currentStyleValue, rtl);\n          return _objectSpread(_objectSpread({}, style), {}, _defineProperty({}, prop, i18nStyleValue));\n        }\n\n        return style;\n      }, {});\n      return _objectSpread(_objectSpread({}, source), rtlStyle);\n    }\n  }]);\n\n  return RTLServiceStatic;\n}();\n\nexports.RTLService = new RTLServiceStatic();","map":{"version":3,"sources":["../../../../../../src/components/devsupport/services/rtl/rtl.service.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;AAIA,IAAA,YAAA,GAAA,OAAA,gBAAA;;IAEM,gB;;;;;;;4BAKQ;AACV,aAAO,cAAA,CAAA,WAAA,CAAY,KAAnB;AACD;;;2BAEgB,G,EAAQ,G,EAAM;AAC7B,aAAO,KAAK,KAAL,KAAe,GAAf,GAAqB,GAA5B;AACD;;;8BAUgB,M,EAA8C;AAAA,UAA3B,GAA2B,uEAAZ,KAAK,KAAL,EAAY;AAC7D,UAAM,QAAQ,GAAc,MAAM,CAAC,IAAP,CAAY,YAAA,CAAA,UAAZ,EAAwB,MAAxB,CAA+B,UAAC,KAAD,EAAmB,IAAnB,EAA8C;AACvG,YAAM,iBAAiB,GAAG,MAAM,CAAC,IAAD,CAAhC;;AACA,YAAI,iBAAJ,EAAuB;AACrB,cAAM,cAAc,GAAG,YAAA,CAAA,UAAA,CAAW,IAAX,EAAiB,KAAjB,CAAuB,iBAAvB,EAA0C,GAA1C,CAAvB;AACA,iDACK,KADL,2BAEG,IAFH,EAEU,cAFV;AAID;;AAED,eAAO,KAAP;AACD,OAX2B,EAWzB,EAXyB,CAA5B;AAaA,6CAAY,MAAZ,GAAuB,QAAvB;AACD;;;;;;AAGU,OAAA,CAAA,UAAA,GAAa,IAAI,gBAAJ,EAAb","sourceRoot":"","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst react_native_1 = require(\"react-native\");\nconst rtlFlexMap_1 = require(\"./rtlFlexMap\");\nclass RTLServiceStatic {\n    /**\n     * @returns true if it is Right-to-Left layout\n     */\n    isRTL() {\n        return react_native_1.I18nManager.isRTL;\n    }\n    select(ltr, rtl) {\n        return this.isRTL() ? rtl : ltr;\n    }\n    /**\n     * Iterates through {RtlFlexMap} and reverses style values if needed.\n     *\n     * @param {ViewStyle} source - style to convert\n     * @param {boolean} rtl - is layout currently in RTL mode (Needed for tests, because unable to mock this)\n     *\n     * @returns {ViewStyle} - style reversed to fit RTL\n     */\n    ignoreRTL(source, rtl = this.isRTL()) {\n        const rtlStyle = Object.keys(rtlFlexMap_1.RtlFlexMap).reduce((style, prop) => {\n            const currentStyleValue = source[prop];\n            if (currentStyleValue) {\n                const i18nStyleValue = rtlFlexMap_1.RtlFlexMap[prop].toRTL(currentStyleValue, rtl);\n                return {\n                    ...style,\n                    [prop]: i18nStyleValue,\n                };\n            }\n            return style;\n        }, {});\n        return { ...source, ...rtlStyle };\n    }\n}\nexports.RTLService = new RTLServiceStatic();\n//# sourceMappingURL=rtl.service.js.map"]},"metadata":{},"sourceType":"script"}