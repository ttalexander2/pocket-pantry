{"ast":null,"code":"\"use strict\";\n/**\n * @license\n * Copyright Akveo. All Rights Reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n */\n\nvar _toConsumableArray = require(\"@babel/runtime/helpers/toConsumableArray\");\n\nvar _defineProperty = require(\"@babel/runtime/helpers/defineProperty\");\n\nvar _classCallCheck = require(\"@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"@babel/runtime/helpers/createClass\");\n\nvar _get = require(\"@babel/runtime/helpers/get\");\n\nvar _inherits = require(\"@babel/runtime/helpers/inherits\");\n\nvar _possibleConstructorReturn = require(\"@babel/runtime/helpers/possibleConstructorReturn\");\n\nvar _getPrototypeOf = require(\"@babel/runtime/helpers/getPrototypeOf\");\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar react_native_1 = require(\"react-native-web/dist/index\");\n\nvar animation_1 = require(\"../animation/animation\");\n\nvar PI = 180;\nvar PI2 = 360;\nvar OFFSET_MIN = PI / 12;\nvar OFFSET_MAX = PI / 6;\nvar BaseBezierEasing = react_native_1.Easing.bezier(0.4, 0.0, 0.7, 1.0);\n\nvar StartArcEasing = function StartArcEasing(progress) {\n  return -PI + OFFSET_MIN + (PI - OFFSET_MAX) * BaseBezierEasing(progress);\n};\n\nvar EndArcEasing = function EndArcEasing(progress) {\n  return PI2 - OFFSET_MIN + (-PI + OFFSET_MAX) * BaseBezierEasing(progress);\n};\n\nvar DEFAULT_CONFIG = {\n  duration: 2400,\n  easing: react_native_1.Easing.linear,\n  cycles: -1,\n  useNativeDriver: react_native_1.Platform.OS !== 'web'\n};\n\nvar SpinnerAnimation = function (_animation_1$Animatio) {\n  _inherits(SpinnerAnimation, _animation_1$Animatio);\n\n  var _super = _createSuper(SpinnerAnimation);\n\n  function SpinnerAnimation(arcSize, config) {\n    var _this;\n\n    _classCallCheck(this, SpinnerAnimation);\n\n    _this = _super.call(this, _objectSpread(_objectSpread({}, DEFAULT_CONFIG), config));\n\n    _this.createFrameRange = function (duration) {\n      var numberOfFrames = 60 * duration / 1000;\n      return new Array(numberOfFrames).fill(0);\n    };\n\n    _this.createContainerInterpolation = function () {\n      return _this.animationValue.interpolate({\n        inputRange: [0, 1],\n        outputRange: [_this.toDegValue(OFFSET_MAX + OFFSET_MIN), _this.toDegValue(2 * PI2 + OFFSET_MAX + OFFSET_MIN)]\n      });\n    };\n\n    _this.createArcInterpolation = function (easing) {\n      return _this.animationValue.interpolate({\n        inputRange: _this.createArcInterpolationInputRange(),\n        outputRange: _this.createArcInterpolationOutputRange(easing)\n      });\n    };\n\n    _this.createArcInterpolationInputRange = function () {\n      return _this.animationFrames.map(function (item, frame) {\n        return frame / (_this.animationFrames.length - 1);\n      });\n    };\n\n    _this.createArcInterpolationOutputRange = function (easing) {\n      return _this.animationFrames.map(function (item, frame) {\n        var progress = 2 * frame / (_this.animationFrames.length - 1);\n        var boundedProgress = Math.min(2.0 - progress, progress);\n        return _this.toDegValue(easing(boundedProgress));\n      });\n    };\n\n    _this.toStyleTransformProp = function (rotate) {\n      var source = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      var transform = [].concat(_toConsumableArray(source.transform || []), [{\n        rotate: rotate\n      }]);\n      return _objectSpread(_objectSpread({}, source), {}, {\n        transform: transform\n      });\n    };\n\n    _this.toDegValue = function (source) {\n      return source + \"deg\";\n    };\n\n    _this.arcSize = arcSize;\n    _this.animationValue = new react_native_1.Animated.Value(0);\n    _this.animationFrames = _this.createFrameRange(_this.config.duration);\n    return _this;\n  }\n\n  _createClass(SpinnerAnimation, [{\n    key: \"start\",\n    value: function start(callback) {\n      this.animationValue.setValue(0);\n\n      _get(_getPrototypeOf(SpinnerAnimation.prototype), \"start\", this).call(this, callback);\n    }\n  }, {\n    key: \"stop\",\n    value: function stop() {\n      _get(_getPrototypeOf(SpinnerAnimation.prototype), \"stop\", this).call(this);\n\n      this.animationValue.setValue(0);\n    }\n  }, {\n    key: \"toProps\",\n    value: function toProps() {\n      var containerInterpolation = this.createContainerInterpolation();\n      var startArcInterpolation = this.createArcInterpolation(StartArcEasing);\n      var endArcInterpolation = this.createArcInterpolation(EndArcEasing);\n      return {\n        container: this.toStyleTransformProp(containerInterpolation),\n        start: this.toStyleTransformProp(startArcInterpolation),\n        end: this.toStyleTransformProp(endArcInterpolation, {\n          transform: [{\n            translateY: -this.arcSize / 2\n          }]\n        })\n      };\n    }\n  }, {\n    key: \"animation\",\n    get: function get() {\n      return react_native_1.Animated.timing(this.animationValue, _objectSpread({\n        toValue: 1.0\n      }, this.config));\n    }\n  }]);\n\n  return SpinnerAnimation;\n}(animation_1.Animation);\n\nexports.SpinnerAnimation = SpinnerAnimation;","map":{"version":3,"sources":["../../../../../src/components/ui/spinner/animation.ts"],"names":[],"mappings":";AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAaA,IAAA,WAAA,GAAA,OAAA,0BAAA;;AAKA,IAAM,EAAE,GAAW,GAAnB;AACA,IAAM,GAAG,GAAW,GAApB;AACA,IAAM,UAAU,GAAW,EAAE,GAAG,EAAhC;AACA,IAAM,UAAU,GAAW,EAAE,GAAG,CAAhC;AAEA,IAAM,gBAAgB,GAAmB,cAAA,CAAA,MAAA,CAAO,MAAP,CAAc,GAAd,EAAmB,GAAnB,EAAwB,GAAxB,EAA6B,GAA7B,CAAzC;;AAEA,IAAM,cAAc,GAAmB,SAAjC,cAAiC,CAAC,QAAD,EAA6B;AAClE,SAAO,CAAC,EAAD,GAAM,UAAN,GAAmB,CAAC,EAAE,GAAG,UAAN,IAAoB,gBAAgB,CAAC,QAAD,CAA9D;AACD,CAFD;;AAIA,IAAM,YAAY,GAAmB,SAA/B,YAA+B,CAAC,QAAD,EAA6B;AAChE,SAAO,GAAG,GAAG,UAAN,GAAmB,CAAC,CAAC,EAAD,GAAM,UAAP,IAAqB,gBAAgB,CAAC,QAAD,CAA/D;AACD,CAFD;;AAIA,IAAM,cAAc,GAA2B;AAC7C,EAAA,QAAQ,EAAE,IADmC;AAE7C,EAAA,MAAM,EAAE,cAAA,CAAA,MAAA,CAAO,MAF8B;AAG7C,EAAA,MAAM,EAAE,CAAC,CAHoC;AAI7C,EAAA,eAAe,EAAE,cAAA,CAAA,QAAA,CAAS,EAAT,KAAgB;AAJY,CAA/C;;IAsBa,gB;;;;;AAMX,4BAAY,OAAZ,EAA6B,MAA7B,EAA4D;AAAA;;AAAA;;AAC1D,8DAAW,cAAX,GAA8B,MAA9B;;AA0CM,UAAA,gBAAA,GAAmB,UAAC,QAAD,EAA+B;AACxD,UAAM,cAAc,GAAW,KAAK,QAAL,GAAgB,IAA/C;AAEA,aAAO,IAAI,KAAJ,CAAU,cAAV,EAA0B,IAA1B,CAA+B,CAA/B,CAAP;AACD,KAJO;;AAMA,UAAA,4BAAA,GAA+B,YAAqC;AAC1E,aAAO,MAAK,cAAL,CAAoB,WAApB,CAAgC;AACrC,QAAA,UAAU,EAAE,CAAC,CAAD,EAAI,CAAJ,CADyB;AAErC,QAAA,WAAW,EAAE,CACX,MAAK,UAAL,CAAgB,UAAU,GAAG,UAA7B,CADW,EAEX,MAAK,UAAL,CAAiB,IAAI,GAAJ,GAAU,UAAV,GAAuB,UAAxC,CAFW;AAFwB,OAAhC,CAAP;AAOD,KARO;;AAUA,UAAA,sBAAA,GAAyB,UAAC,MAAD,EAA2D;AAC1F,aAAO,MAAK,cAAL,CAAoB,WAApB,CAAgC;AACrC,QAAA,UAAU,EAAE,MAAK,gCAAL,EADyB;AAErC,QAAA,WAAW,EAAE,MAAK,iCAAL,CAAuC,MAAvC;AAFwB,OAAhC,CAAP;AAID,KALO;;AAYA,UAAA,gCAAA,GAAmC,YAAe;AACxD,aAAO,MAAK,eAAL,CAAqB,GAArB,CAAyB,UAAC,IAAD,EAAe,KAAf,EAAwC;AACtE,eAAO,KAAK,IAAI,MAAK,eAAL,CAAqB,MAArB,GAA8B,CAAlC,CAAZ;AACD,OAFM,CAAP;AAGD,KAJO;;AAYA,UAAA,iCAAA,GAAoC,UAAC,MAAD,EAAqC;AAC/E,aAAO,MAAK,eAAL,CAAqB,GAArB,CAAyB,UAAC,IAAD,EAAe,KAAf,EAAwC;AACtE,YAAM,QAAQ,GAAW,IAAI,KAAJ,IAAa,MAAK,eAAL,CAAqB,MAArB,GAA8B,CAA3C,CAAzB;AACA,YAAM,eAAe,GAAW,IAAI,CAAC,GAAL,CAAS,MAAM,QAAf,EAAyB,QAAzB,CAAhC;AAEA,eAAO,MAAK,UAAL,CAAgB,MAAM,CAAC,eAAD,CAAtB,CAAP;AACD,OALM,CAAP;AAMD,KAPO;;AAcA,UAAA,oBAAA,GAAuB,UAAC,MAAD,EAA8E;AAAA,UAArC,MAAqC,uEAAjB,EAAiB;AAC3G,UAAM,SAAS,gCAAQ,MAAM,CAAC,SAAP,IAAoB,EAA5B,IAAiC;AAAE,QAAA,MAAM,EAAN;AAAF,OAAjC,EAAf;AAGA,6CAAY,MAAZ;AAAoB,QAAA,SAAS,EAAT;AAApB;AACD,KALO;;AAWA,UAAA,UAAA,GAAa,UAAC,MAAD,EAA2B;AAC9C,aAAU,MAAV;AACD,KAFO;;AA1GN,UAAK,OAAL,GAAe,OAAf;AACA,UAAK,cAAL,GAAsB,IAAI,cAAA,CAAA,QAAA,CAAS,KAAb,CAAmB,CAAnB,CAAtB;AACA,UAAK,eAAL,GAAuB,MAAK,gBAAL,CAAsB,MAAK,MAAL,CAAY,QAAlC,CAAvB;AAJ0D;AAK3D;;;;0BAMY,Q,EAA+B;AAE1C,WAAK,cAAL,CAAoB,QAApB,CAA6B,CAA7B;;AACA,kFAAY,QAAZ;AACD;;;2BAEU;AACT;;AACA,WAAK,cAAL,CAAoB,QAApB,CAA6B,CAA7B;AACD;;;8BAKa;AACZ,UAAM,sBAAsB,GAAmC,KAAK,4BAAL,EAA/D;AACA,UAAM,qBAAqB,GAAmC,KAAK,sBAAL,CAA4B,cAA5B,CAA9D;AACA,UAAM,mBAAmB,GAAmC,KAAK,sBAAL,CAA4B,YAA5B,CAA5D;AAEA,aAAO;AACL,QAAA,SAAS,EAAE,KAAK,oBAAL,CAA0B,sBAA1B,CADN;AAEL,QAAA,KAAK,EAAE,KAAK,oBAAL,CAA0B,qBAA1B,CAFF;AAGL,QAAA,GAAG,EAAE,KAAK,oBAAL,CAA0B,mBAA1B,EAA+C;AAClD,UAAA,SAAS,EAAE,CAAC;AAAE,YAAA,UAAU,EAAE,CAAC,KAAK,OAAN,GAAgB;AAA9B,WAAD;AADuC,SAA/C;AAHA,OAAP;AAOD;;;wBA9BsB;AACrB,aAAO,cAAA,CAAA,QAAA,CAAS,MAAT,CAAgB,KAAK,cAArB;AAAuC,QAAA,OAAO,EAAE;AAAhD,SAAwD,KAAK,MAA7D,EAAP;AACD;;;;EAfmC,WAAA,CAAA,S;;AAAtC,OAAA,CAAA,gBAAA,GAAA,gBAAA","sourceRoot":"","sourcesContent":["\"use strict\";\n/**\n * @license\n * Copyright Akveo. All Rights Reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst react_native_1 = require(\"react-native\");\nconst animation_1 = require(\"../animation/animation\");\nconst PI = 180;\nconst PI2 = 360;\nconst OFFSET_MIN = PI / 12;\nconst OFFSET_MAX = PI / 6;\nconst BaseBezierEasing = react_native_1.Easing.bezier(0.4, 0.0, 0.7, 1.0);\nconst StartArcEasing = (progress) => {\n    return -PI + OFFSET_MIN + (PI - OFFSET_MAX) * BaseBezierEasing(progress);\n};\nconst EndArcEasing = (progress) => {\n    return PI2 - OFFSET_MIN + (-PI + OFFSET_MAX) * BaseBezierEasing(progress);\n};\nconst DEFAULT_CONFIG = {\n    duration: 2400,\n    easing: react_native_1.Easing.linear,\n    cycles: -1,\n    useNativeDriver: react_native_1.Platform.OS !== 'web',\n};\n/**\n * Animates a Spinner in a Material Design way.\n *\n * Thanks these guys for open sourcing the algorithm: https://github.com/n4kz/react-native-indicators\n */\nclass SpinnerAnimation extends animation_1.Animation {\n    constructor(arcSize, config) {\n        super({ ...DEFAULT_CONFIG, ...config });\n        /**\n         * @param {number} duration - animation duration.\n         * @returns an array of frames fitted into animation.\n         */\n        this.createFrameRange = (duration) => {\n            const numberOfFrames = 60 * duration / 1000;\n            return new Array(numberOfFrames).fill(0);\n        };\n        this.createContainerInterpolation = () => {\n            return this.animationValue.interpolate({\n                inputRange: [0, 1],\n                outputRange: [\n                    this.toDegValue(OFFSET_MAX + OFFSET_MIN),\n                    this.toDegValue((2 * PI2 + OFFSET_MAX + OFFSET_MIN)),\n                ],\n            });\n        };\n        this.createArcInterpolation = (easing) => {\n            return this.animationValue.interpolate({\n                inputRange: this.createArcInterpolationInputRange(),\n                outputRange: this.createArcInterpolationOutputRange(easing),\n            });\n        };\n        /**\n         * Maps the animation frames into initial animation values specific for each frame.\n         *\n         * @returns a container interpolation input range in a numeric format.\n         */\n        this.createArcInterpolationInputRange = () => {\n            return this.animationFrames.map((item, frame) => {\n                return frame / (this.animationFrames.length - 1);\n            });\n        };\n        /**\n         * Maps the animation frames into a final animation values specific for each frame.\n         *\n         * @param {(progress: number) => number} easing - Easing function specific for the arc.\n         * @returns an arc interpolation end values eased with an `easing` function in a StyleSheet degree format.\n         */\n        this.createArcInterpolationOutputRange = (easing) => {\n            return this.animationFrames.map((item, frame) => {\n                const progress = 2 * frame / (this.animationFrames.length - 1);\n                const boundedProgress = Math.min(2.0 - progress, progress);\n                return this.toDegValue(easing(boundedProgress));\n            });\n        };\n        /**\n         * @param {Animated.AnimatedInterpolation} rotate - animated rotation animationValue.\n         * @param {ViewStyle} source - initial StyleSheet object.\n         * @returns a final StyleSheet object with a `rotate` animation value.\n         */\n        this.toStyleTransformProp = (rotate, source = {}) => {\n            const transform = [...(source.transform || []), { rotate }];\n            // @ts-ignore: AnimatedInterpolation does not fit RotateTransform type declaration\n            return { ...source, transform };\n        };\n        /**\n         * @param {number} source - degrees in a numeric format.\n         * @returns degrees in a StyleSheet format.\n         */\n        this.toDegValue = (source) => {\n            return `${source}deg`;\n        };\n        this.arcSize = arcSize;\n        this.animationValue = new react_native_1.Animated.Value(0);\n        this.animationFrames = this.createFrameRange(this.config.duration);\n    }\n    get animation() {\n        return react_native_1.Animated.timing(this.animationValue, { toValue: 1.0, ...this.config });\n    }\n    start(callback) {\n        // reset animation value before the next animation cycle\n        this.animationValue.setValue(0);\n        super.start(callback);\n    }\n    stop() {\n        super.stop();\n        this.animationValue.setValue(0);\n    }\n    /**\n     * @returns {SpinnerAnimationStyle} - an object that contains container, start and end arcs transform styles.\n     */\n    toProps() {\n        const containerInterpolation = this.createContainerInterpolation();\n        const startArcInterpolation = this.createArcInterpolation(StartArcEasing);\n        const endArcInterpolation = this.createArcInterpolation(EndArcEasing);\n        return {\n            container: this.toStyleTransformProp(containerInterpolation),\n            start: this.toStyleTransformProp(startArcInterpolation),\n            end: this.toStyleTransformProp(endArcInterpolation, {\n                transform: [{ translateY: -this.arcSize / 2 }],\n            }),\n        };\n    }\n}\nexports.SpinnerAnimation = SpinnerAnimation;\n//# sourceMappingURL=animation.js.map"]},"metadata":{},"sourceType":"script"}