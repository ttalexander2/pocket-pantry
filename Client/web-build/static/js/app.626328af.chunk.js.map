{"version":3,"sources":["src/navigation/HomeBar.js","src/navigation/Dashboard.js","src/forms/NewPantryForm.js","src/navigation/Pantry.js","src/navigation/Calendar.js","src/navigation/Cookbook.js","src/navigation/GroceryList.js","App.js"],"names":["HomeBar","props","leftComponent","text","style","color","centerComponent","name","foodExpire","date","foodFavorite","foodRecipe","Dashboard","h1","Title","Divider","map","expire","favorite","recipe","React","NewPantryForm","placeholder","list","subtitle","Pantry","state","formVisible","flex","flexDirection","width","u","Text","title","onPress","setState","this","Calendar","Cookbook","recipeResults","recipeContent","queryStr","selected","data","renderJson","View","onChangeText","getJson","styles","fixed","trim","hasOwnProperty","source","uri","image","height","PlaceholderContent","ActivityIndicator","h4","yield","h3","ingredients","item","instructions","JSON","stringify","ScrollView","container","results","resizeMode","thumbnail","Linking","openURL","href","scrapeRecipe","stuff","split","myHeaders","Headers","append","raw","fetch","method","headers","body","redirect","then","response","result","parse","catch","error","console","log","url","e","StyleSheet","create","flexWrap","paddingBottom","alignItems","left","position","top","display","GroceryList","Tab","createBottomTabNavigator","App","NavigationContainer","Navigator","Screen","component"],"mappings":"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","file":"static/js/app.626328af.chunk.js","sourcesContent":["import * as React from 'react';\nimport { View, Text } from 'react-native';\nimport { ThemeProvider, Header } from 'react-native-elements';\n\nconst HomeBar = (props) => {\n    return (\n        <ThemeProvider>\n        <Header leftComponent={{text: 'Pocket Pantry', style: { color: '#fff' } }} centerComponent={{ text: props.name, style: { color: '#fff' } }}/>\n        </ThemeProvider>\n      );\n}\n\nexport default HomeBar;\n","import * as React from 'react';\nimport { ThemeProvider, Card, Header, Text } from 'react-native-elements';\nimport HomeBar from './HomeBar';\n\nconst foodExpire = [{name: 'sushi', date: 'xx/xx'}, {name: 'nigiri', date: 'xx/xx'}, {name: 'ramen', date: 'xx/xx'}, {name: 'tempura', date: 'xx/xx'}]\nconst foodFavorite = [{name: 'sushi'}, {name: 'ramen'}]\nconst foodRecipe = [{name: 'sushi'}]\n\nexport default class Dashboard extends React.Component{\n\nrender() {\n    return (\n        <ThemeProvider>\n            <HomeBar name='Dashboard' />\n            <Text h1>Hello, World!</Text>\n            <Card>\n                <Card.Title>Food to be Expired This Week</Card.Title>\n                <Card.Divider/>\n                {\n                    foodExpire.map((expire) => {\n                        return (\n                            <Text>- {expire.date}: {expire.name}</Text>\n                        );\n                    })\n                }\n            </Card>\n            <Card>\n                <Card.Title>Food Favorites</Card.Title>\n                <Card.Divider/>\n                {\n                    foodFavorite.map((favorite) => {\n                        return (\n                            <Text>- {favorite.name}</Text>\n                        );\n                    })\n                }\n            </Card>\n            <Card>\n                <Card.Title>Your Recommended Recipe of the Day</Card.Title>\n                <Card.Divider/>\n                {\n                    foodRecipe.map((recipe) => {\n                        return (\n                            <Text> {recipe.name}</Text>\n                        );\n                    })\n                }\n            </Card>\n        </ThemeProvider>\n    );\n  }\n}","import * as React from 'react';\nimport { ThemeProvider, Input, Button } from 'react-native-elements';\n\nclass NewPantryForm extends React.Component {  \n  //TODO: Add form input\n  render() {\n    return (\n      <ThemeProvider>\n        <Input placeholder=\"Food Name\" />\n        \n        \n      </ThemeProvider>\n\n    );\n\n  }\n}\n\nexport default NewPantryForm;\n","import * as React from 'react';\nimport { useState } from 'react';\nimport { Text } from 'react-native';\nimport NewPantryForm from './../forms/NewPantryForm'\nimport { ThemeProvider, Header, Overlay, Card, Button } from 'react-native-elements';\nimport HomeBar from './HomeBar';\n\nconst list = [\n  {\n    name: 'Rice',\n    subtitle: '120 Grains'\n  },\n  {\n    name: 'Pasta',\n    subtitle: '232 Shells'\n  }\n]\n\nexport default class Pantry extends React.Component{\n  state = {formVisible: false}\n\nrender() {\n    return (\n      <ThemeProvider style={{flex: 1, flexDirection: 'row'}}>\n        <HomeBar name='Pantry' />\n        <Card style={ {width: '45%' }} >\n            <Card.Title>Food Items That You Have</Card.Title>\n            <Card.Divider/>\n            {\n                list.map((u) => {\n                    return (\n                        <Text>- {u.name}: {u.subtitle}</Text>\n                    );\n                })\n            }\n          </Card>\n          <Button title=\"Add an Item\" onPress={() => {\n            this.setState({formVisible: !this.state.formVisible });\n          }}/>\n\n          {\n            this.state.formVisible &&\n            <NewPantryForm />\n          }\n          \n      </ThemeProvider>\n    );\n  }\n}","import * as React from 'react';\nimport { View, Text } from 'react-native';\nimport { ThemeProvider, Header } from 'react-native-elements';\nimport HomeBar from './HomeBar';\n\nexport default class Calendar extends React.Component{\n\nrender() {\n    return (\n      <ThemeProvider>\n      <HomeBar name='Calendar' />\n      </ThemeProvider>\n    );\n  }\n}","import * as React from 'react';\nimport { View, ScrollView, Linking, StyleSheet, ActivityIndicator  } from \"react-native\";\nimport { Text, ThemeProvider, Input, Button,  Card, Image } from 'react-native-elements';\nimport { FlatList } from 'react-native-gesture-handler';\nimport HomeBar from './HomeBar';\n\n\n\nexport default class Cookbook extends React.Component{\n  state = {\n    recipeResults: {\"results\": []},\n    recipeContent: {},\n    queryStr: \"\",\n    selected: null,\n    data: ['SELECTED','NOT SELECTED']\n  }\n\n  renderJson = () => {\n    let comp = []\n\n    \n    return(comp)\n  }\n\n\n\n  render() {\n    return (\n      <ThemeProvider>\n          <HomeBar name='Cookbook' />\n            <View>\n              <Input placeholder=\"Ingredient\" onChangeText={(text) => {this.setState({queryStr: text})}} />\n              <Button title=\"Search\" onPress={() => { this.getJson()}}/>\n            </View>\n            <View style={styles.fixed}>\n                    {\n                      this.state.selected != null\n                      &&\n                      <Card style={{width: '50%'}}>\n                        <Card.Title>\n                          {this.state.selected.trim()}\n                        </Card.Title>\n                        <Card.Divider/>\n                        <Text>\n                          {\n                          this.state.recipeContent.hasOwnProperty('title')\n                          ?\n                          <View>\n                            {\n                              this.state.recipeContent.hasOwnProperty('image')\n                              &&\n                              <Image \n                              source={{ uri: this.state.recipeContent.image }}\n                              style={{ width: 200, height: 200 }}\n                              PlaceholderContent={<ActivityIndicator/>}\n                            />\n                            }\n                            <Text h4>\n                            {\n                            this.state.recipeContent.hasOwnProperty('yield')\n                            &&\n                            this.state.recipeContent.yield\n                            }\n                            </Text>\n                            <Text h3>\n                              Ingredients\n                            </Text>\n                            <View>\n                            {\n                              this.state.recipeContent.hasOwnProperty('ingredients')\n                              &&\n                              this.state.recipeContent.ingredients.map((item) => {\n                                return(\n                                  <Text>\n                                    - {item}\n                                  </Text>\n                                )\n                              })\n                            }\n                            </View>\n                            <Text h3>\n                              Instructions\n                            </Text>\n                            <Text>\n                              {\n                                this.state.recipeContent.hasOwnProperty('instructions')\n                                &&\n                                this.state.recipeContent.instructions\n                              }\n                            </Text>\n                          </View>\n                          :\n                          JSON.stringify(this.state.recipeContent)\n                          }\n                        </Text>\n                      </Card>\n                    }    \n            </View>\n            <ScrollView>\n              <View style={styles.container} >\n                <View style={styles.item}>\n                {\n                  this.state.recipeResults.results.map((item) => {\n                    return(\n                      <Card>\n                      <Card.Title>\n                        {item.title.trim()}\n                      </Card.Title>\n                      <Card.Divider/>\n                      <Image resizeMode=\"cover\"\n                        source={{ uri: item.thumbnail }}>\n                      </Image>\n                      <Text>Ingredients: {item.ingredients}</Text>\n                      <Text style={{color: 'blue'}}\n                          onPress={() => Linking.openURL(item.href)}>\n                        {item.href}\n                      </Text>\n                      <Button title=\"Open\" onPress={() => {\n                        this.setState({selected: item.title});\n                        this.scrapeRecipe(item.href);\n                      }}/>\n                    </Card>\n                    )\n                  })\n                }\n                </View>\n              </View>\n            </ScrollView>\n      </ThemeProvider>\n    );\n  }\n\n\n\n  getJson(){\n\n    const stuff = {\n        ingredients: this.state.queryStr.split(', ')\n    };\n\n    var myHeaders = new Headers();\n    myHeaders.append(\"Content-Type\", \"application/json\");\n    myHeaders.append('Access-Control-Allow-Origin', '*');\n\n    var raw = JSON.stringify(stuff);\n\n    var requestOptions = {\n      method: 'POST',\n      headers: myHeaders,\n      body: raw,\n      redirect: 'follow'\n    };\n\n    fetch(\"http://localhost:42069/api/recipes\", requestOptions)\n      .then(response => response.text())\n      .then(result => this.setState({recipeResults: JSON.parse(result)}))\n      .catch(error => console.log('error', error));\n \n  }\n\n  scrapeRecipe(url){\n\n    var myHeaders = new Headers();\n    myHeaders.append(\"Content-Type\", \"application/json\");\n    myHeaders.append('Access-Control-Allow-Origin', '*');\n\n    var raw = JSON.stringify({'url':url});\n\n    var requestOptions = {\n      method: 'POST',\n      headers: myHeaders,\n      body: raw,\n      redirect: 'follow'\n    };\n\n    fetch(\"http://localhost:42069/api/recipes/scrape\", requestOptions)\n      .then(response => response.text())\n      .then(result => {\n        try {\n          this.setState({recipeContent: JSON.parse(result)});\n          \n        } catch (e) {\n            this.setState({recipeContent: result})\n        }\n      })\n      .catch(error => console.log('error', error));   \n    }\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    flexDirection: 'row',\n    flexWrap: 'wrap',\n    paddingBottom: 10,\n    alignItems: 'flex-start' // if you want to fill rows left to right\n  },\n  item: {\n    left: '50%',\n    width: '50%', // is 50% of container width\n  },\n  fixed: {\n    position: 'absolute',\n    left: 0,\n    top: 139,\n    display: 'flex',\n    alignItems: 'stretch',\n    width: '50%',\n    height: '100%'\n\n  }\n})\n","import * as React from 'react';\nimport { View, Text } from 'react-native';\nimport { ThemeProvider, Header } from 'react-native-elements';\nimport HomeBar from './HomeBar';\n\nexport default class GroceryList extends React.Component{\n\nrender() {\n    return (\n      <ThemeProvider>\n      <HomeBar name='Grocery List' />\n      </ThemeProvider>\n    );\n  }\n}","import 'react-native-gesture-handler';\r\nimport React, { Component } from 'react';\r\nimport Dashboard from './src/navigation/Dashboard';\r\nimport Pantry from './src/navigation/Pantry';\r\nimport Calendar from './src/navigation/Calendar';\r\nimport Cookbook from './src/navigation/Cookbook';\r\nimport GroceryList from './src/navigation/GroceryList';\r\nimport { NavigationContainer } from '@react-navigation/native';\r\nimport { createBottomTabNavigator } from '@react-navigation/bottom-tabs';\r\nimport { Icon } from 'react-native-elements'\r\n\r\n\r\nconst Tab = createBottomTabNavigator();\r\n\r\nexport default function App() {\r\n  return (\r\n    <NavigationContainer>\r\n      <Tab.Navigator>\r\n        <Tab.Screen name=\"Dashboard\" component={Dashboard} />\r\n        <Tab.Screen name=\"Pantry\" component={Pantry} />\r\n        <Tab.Screen name=\"Calendar\" component={Calendar} />\r\n        <Tab.Screen name=\"Cookbook\" component={Cookbook} />\r\n        <Tab.Screen name=\"Grocery List\" component={GroceryList} />\r\n      </Tab.Navigator>\r\n    </NavigationContainer>\r\n  );\r\n}\r\n"],"sourceRoot":""}